services:
  postgres-offer-db:
    image: postgres:15-alpine
    container_name: offer-management-db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: offer_management
    command: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./database-init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M

  backend-apis:
    build:
      context: ./backend-apis
      dockerfile: Dockerfile
    container_name: offer-management-api
    depends_on:
      postgres-offer-db:
        condition: service_healthy
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres-offer-db:5432/offer_management
      - PROJECT_NAME=Offer Management Platform
      - SECRET_KEY=supersecretkey123notforproduction
    volumes:
      - ./backend-apis/app:/app/app
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  frontend-app:
    build:
      context: ./frontend-app
      dockerfile: Dockerfile
    container_name: frontend-app
    ports:
      - "3000:3000"
    volumes:
      - ./frontend-app:/app
      - /app/node_modules
    environment:
      - VITE_API_URL=http://localhost:8000
    restart: unless-stopped 
    depends_on:
      - backend-apis

  # Service to clean up the database (run with --profile cleanup)
  db-cleanup:
    image: alpine:latest
    container_name: db-cleanup
    command: sh -c "echo 'Removing database volume' && rm -rf /data/* && echo 'Database volume cleaned'"
    volumes:
      - postgres-data:/data
    profiles:
      - cleanup

volumes:
  postgres-data: